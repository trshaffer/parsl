#!/usr/bin/env python3
import json
import os
import sys
import tempfile
import argparse
import subprocess

import conda_pack

devnull = open(os.devnull, 'w')

def pack_env(spec, out):
    package_data = json.load(spec)
    python_version = package_data["python"]
    dependencies = package_data["modules"]

    with tempfile.TemporaryDirectory() as env_dir:
        with tempfile.NamedTemporaryFile(mode='w') as req_file:
            for module in dependencies:
                req_file.write(module + "\n")
            req_file.flush()
            os.fsync(req_file.fileno())

            # ought to make sure no shell metacharacters are in the names...
            subprocess.check_call("""eval "$(conda shell.bash hook)" &&
                conda create -p "{}" -y "python={}" &&
                conda activate "{}" &&
                pip install -r "{}" &&
                pip install tblib""".format(
                    env_dir, python_version, env_dir, req_file.name),
                shell=True, stdout=devnull, stderr=devnull)
        conda_pack.pack(prefix=env_dir, output=out, force=True)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Create a packed environment from a spec.')
    parser.add_argument('spec',
        help='Read in a spec file, or - for stdin.')
    parser.add_argument('out',
        help='Write output from conda-pack to the given file.')
    args = parser.parse_args()

    spec = sys.stdin
    if args.spec != '-':
        spec = open(args.spec, 'r')

    pack_env(spec, args.out)
