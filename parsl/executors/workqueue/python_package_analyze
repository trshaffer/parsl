#!/usr/bin/env python3
import os
import re
import sys
import json
import argparse
import subprocess
from stdlib_list import stdlib_list

libraries = stdlib_list(".".join(sys.version.split()[0].split(".")[:2]))

def find_imports(source):
    dependencies = []
    for line in source.readlines():
        words = line.split()
        isList = False
        isFrom = False
        # Iterate through each word in the line
        for i in range(0, len(words)):
            # Signals that you are importing a module
            if words[i] == "from" or words[i] == "import":
                if words[i] == "from":
                    isFrom = True
                i += 1
                name = words[i]
                if name[-1] == ",":
                    name = name[:-1]
                    isList = True
                if name not in libraries:
                    dependencies.append(name)
            # Iterate through multiple imports if multiple listed on one line
            while isList:
                i += 1
                nane = words[i]
                if name[-1] == ",":
                    name = name[:-1]
                else:
                    isList = False
                if name not in libraries:
                    dependencies.append(name)
            if isFrom:
                break
    return dependencies

def export_env(source):
    imports = set(find_imports(source) + ['python', 'pip'])
    env = json.loads(
        subprocess.check_output(['conda', 'env', 'export', '--json']))
    full_deps = env.pop('dependencies', [])
    deps = []
    pip = []
    for a in full_deps:
        if isinstance(a, dict):
            for b in a['pip']:
                for pkg in imports:
                    if b.startswith(pkg + '='):
                        pip.append(b)
        else:
            for pkg in imports:
                if a.startswith(pkg + '='):
                    deps.append(a)

    deps.sort()
    pip.sort()
    if pip:
        deps.append({'pip': pip})
    if deps:
        env['dependencies'] = deps
    return env

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Determine the environment required by Python code.')
    parser.add_argument('source',
        help='Analyze the given Python source code, or - for stdin.')
    parser.add_argument('out',
        help='Path to write the JSON description, or - for stdout.')
    args = parser.parse_args()

    source = sys.stdin
    out = sys.stdout
    if args.source != '-':
        source = open(args.source, 'r')
    if args.out != '-':
        out = open(args.out, 'w')

    json.dump(export_env(source), out, indent=4, sort_keys=True)
    out.write('\n')
